#+AUTHOR: Lani Willrich
* Packages
** Helm 
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(use-package helm)
(global-set-key (kbd "M-x") 'helm-M-x)
(helm-mode 1)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp 
(use-package projectile)
(use-package helm-projectile)
(projectile-global-mode)
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
#+END_SRC 
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config (add-hook 'org-mode-hook (lambda()(org-bullets-mode))))
#+END_SRC
** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode)
  (define-globalized-minor-mode global-rainbow-mode rainbow-mode
    (lambda () (rainbow-mode 1)))
  (global-rainbow-mode 1)
#+END_SRC
** Rainbow Delim
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters)
  (define-globalized-minor-mode global-rainbow-delimiters-mode rainbow-delimiters-mode
      (lambda () (rainbow-mode 1)))
    (global-rainbow-mode 1)
#+END_SRC
** Switch Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window)
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (global-set-key (kbd "C-x o") 'switch-window)
#+END_SRC
** Sudo edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
  (global-set-key (kbd "C-x M-f") 'sudo-edit)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company)
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  (add-to-list 'company-backends 'company-elisp)
  (add-to-list 'company-backends 'company-clang)

  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet)
  (use-package yasnippet-snippets)
  (yas-reload-all)
  (yas-global-mode 1)
#+END_SRC
** Other packages
#+BEGIN_SRC emacs-lisp
(use-package alect-themes)
(load-theme 'alect-dark-alt t)
(use-package json)
(use-package magit)
(use-package erc)
#+END_SRC
* Pretty Stuff
** Remove all the junk
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq inhibit-splash-screen t)
#+END_SRC
** Line numbers and highlighting
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
(when window-system (global-prettify-symbols-mode t))
(global-display-line-numbers-mode)
#+END_SRC
** No more backups
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles  nil)
#+END_SRC
** Space tabbing
#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode nil)
#+END_SRC
** y-or-n-p
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Better Buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)

#+END_SRC
** Subwords
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)

#+END_SRC
* Org
** <el support
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** better source editing
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
* Keybinds
** Buffer eval
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-S-s") 'eval-buffer)
#+END_SRC
** Gets rid of C-z
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z") ) 
#+END_SRC
** Fixes C-k
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-k") 'kill-whole-line)
#+END_SRC
* Terminal
** Ansi-term keybind
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-RET") 'ansi-term)

#+END_SRC
** Force bash
#+BEGIN_SRC emacs-lisp
  (defvar term-sh "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list term-sh)))
  (ad-activate 'ansi-term)
#+END_SRC
* Bug Fixes
** Random bug to do with LARBS and Xresources
#+BEGIN_SRC emacs-lisp
  (setq inhibit-x-resources t)
#+END_SRC
k
* Custom Functions
** window splits
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Configuration based keybinds
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x c e")
		  (lambda()(interactive)(find-file "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-x c r")
		  (lambda()(interactive)
		    (when (get-buffer "config.org") (save-buffer "config.org"))
		    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))))
  (global-set-key (kbd "C-x c p")
		  (lambda()(interactive)
		    (when (get-buffer "config.org") (save-buffer "config.org"))
		    (magit-call-git "add" "config.org")
		    (magit-call-git "commit" "-m" "Automagitally commited")
		    (magit-call-git "push" "origin")
		    (magit-refresh)))

#+END_SRC

